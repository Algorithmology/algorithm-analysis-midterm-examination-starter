setup: |
  echo "🐊 Attempt to install software engineering tools"
  echo "🐊 Will not re-install if already installed"
  poetry install
---

# Honor Code {{{

- ../README.md:
    - description: Ensure that the README.md file exists inside of the root of the GitHub repository
      check: ConfirmFileExists
    - description: Delete the phrase 'Add Your Name Here' and add your own name as an Honor Code pledge in README.md
      check: MatchFileFragment
      options:
        fragment: "Add Your Name Here"
        count: 0
        exact: true
    - description: Retype the every word in the Honor Code pledge in README.md
      check: MatchFileFragment
      options:
        fragment: "I adhered to the Allegheny College Honor Code while completing this examination."
        count: 3
        exact: true

# }}}

# Basic Program Characteristics {{{

# Question 1

# perform checks on the program file
- questions/question_one.py:
    # --> file exists in the correct directory
    - description: Ensure that question_one.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_one.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_one.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 4
        exact: true

# perform checks on the test file
- tests/test_question_one.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_one.py file exists in the tests/ directory
      check: ConfirmFileExists

# Question 2

# perform checks on the program file
- questions/question_two.py:
    # --> file exists in the correct directory
    - description: Ensure that question_two.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_two.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_two.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 4
        exact: true

# perform checks on the test file
- tests/test_question_two.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_two.py file exists in the tests/ directory
      check: ConfirmFileExists

# Question 3

# perform checks on the program file
- questions/question_three.py:
    # --> file exists in the correct directory
    - description: Ensure that question_three.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_three.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_three.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 4
        exact: true

# perform checks on the test file
- tests/test_question_three.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_three.py file exists in the tests/ directory
      check: ConfirmFileExists

# Question 4

# perform checks on the program file
- questions/question_four.py:
    # --> file exists in the correct directory
    - description: Ensure that question_four.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_four.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_four.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 7
        exact: true

# perform checks on the test file
- tests/test_question_four.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_four.py file exists in the tests/ directory
      check: ConfirmFileExists
 
# }}}

# Program Output {{{

# Question 1

- description: Run checks for Question 1 Part (a) with 'execexam' command and confirm correct exit code
  objectives: "LO1"
  command: poetry run execexam . tests/ --verbose --mark "question_one_part_a"

- description: Run checks for Question 1 Part (b) with 'execexam' command and confirm correct exit code
  objectives: "LO1"
  command: poetry run execexam . tests/ --verbose --mark "question_one_part_b"

- description: Run checks for Question 1 Part (c) with 'execexam' command and confirm correct exit code
  objectives: "LO1"
  command: poetry run execexam . tests/ --verbose --mark "question_one_part_c"

# Question 2

- description: Run checks for Question 2 Part (a) with 'execexam' command and confirm correct exit code
  objectives: "LO1"
  command: poetry run execexam . tests/ --verbose --mark "question_two_part_a"

- description: Run checks for Question 2 Part (b) with 'execexam' command and confirm correct exit code
  objectives: "LO1"
  command: poetry run execexam . tests/ --verbose --mark "question_two_part_b"

- description: Run checks for Question 2 Part (c) with 'execexam' command and confirm correct exit code
  objectives: "LO1"
  command: poetry run execexam . tests/ --verbose --mark "question_two_part_c"

# Question 3

- description: Run checks for Question 3 Part (a) with 'execexam' command and confirm correct exit code
  objectives: "LO4"
  command: poetry run execexam . tests/ --verbose --mark "question_three_part_a"

- description: Run checks for Question 3 Part (b) with 'execexam' command and confirm correct exit code
  objectives: "LO4"
  command: poetry run execexam . tests/ --verbose --mark "question_three_part_b"

- description: Run checks for Question 3 Part (c) with 'execexam' command and confirm correct exit code
  objectives: "LO4"
  command: poetry run execexam . tests/ --verbose --mark "question_three_part_c"

# Question 4

- description: Run checks for Question 4 Part (a) with 'execexam' command and confirm correct exit code
  objectives: "LO4"
  command: poetry run execexam . tests/ --verbose --mark "question_four_part_a"

- description: Run checks for Question 4 Part (b) with 'execexam' command and confirm correct exit code
  objectives: "LO4"
  command: poetry run execexam . tests/ --verbose --mark "question_four_part_b"

- description: Run checks for Question 4 Part (c) with 'execexam' command and confirm correct exit code
  objectives: "LO4"
  command: poetry run execexam . tests/ --verbose --mark "question_four_part_c"

# }}}

# Program Analysis with Algorithm Engineering Tools {{{

# Question 1

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 1 follows industry-standard rules using the command 'ruff check'
  objectives: "LO1"
  command: poetry run ruff check questions/question_one.py

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 1 adheres to an industry-standard format using the command 'ruff format'
  objectives: "LO1"
  command: poetry run ruff format questions/question_one.py --check

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 1 has correct type annotations using the command 'mypy'
  objectives: "LO1"
  command: poetry run mypy questions/question_one.py

# run symbex: count functions with full type annotations
- description: Ensure that Question 1 has correct number of fully type annotated functions using the command 'symbex'
  check: MatchCommandFragment
  objectives: "LO1"
  options:
    command: "poetry run symbex -s --fully-typed -f questions/question_one.py --count"
    fragment: 3
    count: 1
    exact: true

# run symbex: count functions with docstring-based documentation (note: does not count module docstring)
- description: Ensure that Question 1 has correct number of documented functions using the command 'symbex'
  check: MatchCommandFragment
  objectives: "LO1"
  options:
    command: "poetry run symbex -s --documented -f questions/question_one.py --count"
    fragment: 3
    count: 1
    exact: true

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 1 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  objectives: "LO1"
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_one.py --count"
    fragment: 0
    count: 1
    exact: true

# Question 2

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 2 follows industry-standard rules using the command 'ruff check'
  objectives: "LO1"
  command: poetry run ruff check questions/question_two.py

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 2 adheres to an industry-standard format using the command 'ruff format'
  objectives: "LO1"
  command: poetry run ruff format questions/question_two.py --check

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 2 has correct type annotations using the command 'mypy'
  objectives: "LO1"
  command: poetry run mypy questions/question_two.py

# run symbex: count functions with full type annotations
- description: Ensure that Question 2 has correct number of fully type annotated functions using the command 'symbex'
  check: MatchCommandFragment
  objectives: "LO1"
  options:
    command: "poetry run symbex -s --fully-typed -f questions/question_two.py --count"
    fragment: 3
    count: 1
    exact: true

# run symbex: count functions with docstring-based documentation (note: does not count module docstring)
- description: Ensure that Question 2 has correct number of documented functions using the command 'symbex'
  check: MatchCommandFragment
  objectives: "LO1"
  options:
    command: "poetry run symbex -s --documented -f questions/question_two.py --count"
    fragment: 3
    count: 1
    exact: true

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 2 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  objectives: "LO1"
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_two.py --count"
    fragment: 0
    count: 1
    exact: true

# Question 3

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 3 follows industry-standard rules using the command 'ruff check'
  objectives: "LO4"
  command: poetry run ruff check questions/question_three.py

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 3 adheres to an industry-standard format using the command 'ruff format'
  objectives: "LO4"
  command: poetry run ruff format questions/question_three.py --check

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 3 has correct type annotations using the command 'mypy'
  objectives: "LO4"
  command: poetry run mypy questions/question_three.py

# run symbex: count functions with full type annotations
- description: Ensure that Question 3 has correct number of fully type annotated functions using the command 'symbex'
  check: MatchCommandFragment
  objectives: "LO4"
  options:
    command: "poetry run symbex -s --fully-typed -f questions/question_three.py --count"
    fragment: 3
    count: 1
    exact: true

# run symbex: count functions with docstring-based documentation (note: does not count module docstring)
- description: Ensure that Question 3 has correct number of documented functions using the command 'symbex'
  check: MatchCommandFragment
  objectives: "LO4"
  options:
    command: "poetry run symbex -s --documented -f questions/question_three.py --count"
    fragment: 3
    count: 1
    exact: true

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 3 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  objectives: "LO4"
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_three.py --count"
    fragment: 0
    count: 1
    exact: true

# Question 4

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 4 follows industry-standard rules using the command 'ruff check'
  objectives: "LO4"
  command: poetry run ruff check questions/question_four.py

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 4 adheres to an industry-standard format using the command 'ruff format'
  objectives: "LO4"
  command: poetry run ruff format questions/question_four.py --check

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 4 has correct type annotations using the command 'mypy'
  objectives: "LO4"
  command: poetry run mypy questions/question_four.py

# run symbex: count functions with full type annotations
- description: Ensure that Question 4 has correct number of fully type annotated functions using the command 'symbex'
  check: MatchCommandFragment
  objectives: "LO4"
  options:
    command: "poetry run symbex -s --fully-typed -f questions/question_four.py --count"
    fragment: 4
    count: 1
    exact: true

# run symbex: count functions with docstring-based documentation (note: does not count module docstring)
- description: Ensure that Question 4 has correct number of documented functions using the command 'symbex'
  check: MatchCommandFragment
  objectives: "LO4"
  options:
    command: "poetry run symbex -s --documented -f questions/question_four.py --count"
    fragment: 5
    count: 1
    exact: true

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 4 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  objectives: "LO4"
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_four.py --count"
    fragment: 0
    count: 1
    exact: true

# }}}
