{"amount_correct": 21, "percentage_score": 38, "report_time": "2024-03-14 17:39:40", "checks": [{"description": "Ensure that the README.md file exists inside of the root of the GitHub repository", "check": "ConfirmFileExists", "status": true, "path": "../README.md"}, {"description": "Delete the phrase 'Add Your Name Here' and add your own name as an Honor Code pledge in README.md", "check": "MatchFileFragment", "options": {"fragment": "Add Your Name Here", "count": 0, "exact": true}, "status": true, "path": "../README.md"}, {"description": "Retype the every word in the Honor Code pledge in README.md", "check": "MatchFileFragment", "options": {"fragment": "I adhered to the Allegheny College Honor Code while completing this examination.", "count": 3, "exact": true}, "status": false, "path": "../README.md", "diagnostic": "Found 2 fragment(s) in the README.md or the output while expecting exactly 3"}, {"description": "Ensure that question_one.py file exists in the questions/ directory", "check": "ConfirmFileExists", "status": true, "path": "questions/question_one.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for question_one.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "questions/question_one.py", "diagnostic": "Found 10 fragment(s) in the question_one.py or the output while expecting exactly 0"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in question_one.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 4, "exact": true}, "status": false, "path": "questions/question_one.py", "diagnostic": "Found 3 comment(s) in the question_one.py or the output"}, {"description": "Ensure that test_question_one.py file exists in the tests/ directory", "check": "ConfirmFileExists", "status": true, "path": "tests/test_question_one.py"}, {"description": "Ensure that question_two.py file exists in the questions/ directory", "check": "ConfirmFileExists", "status": true, "path": "questions/question_two.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for question_two.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "questions/question_two.py", "diagnostic": "Found 7 fragment(s) in the question_two.py or the output while expecting exactly 0"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in question_two.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 4, "exact": true}, "status": false, "path": "questions/question_two.py", "diagnostic": "Found 3 comment(s) in the question_two.py or the output"}, {"description": "Ensure that test_question_two.py file exists in the tests/ directory", "check": "ConfirmFileExists", "status": true, "path": "tests/test_question_two.py"}, {"description": "Ensure that question_three.py file exists in the questions/ directory", "check": "ConfirmFileExists", "status": true, "path": "questions/question_three.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for question_three.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "questions/question_three.py", "diagnostic": "Found 8 fragment(s) in the question_three.py or the output while expecting exactly 0"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in question_three.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 4, "exact": true}, "status": false, "path": "questions/question_three.py", "diagnostic": "Found 3 comment(s) in the question_three.py or the output"}, {"description": "Ensure that test_question_three.py file exists in the tests/ directory", "check": "ConfirmFileExists", "status": true, "path": "tests/test_question_three.py"}, {"description": "Ensure that question_four.py file exists in the questions/ directory", "check": "ConfirmFileExists", "status": true, "path": "questions/question_four.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for question_four.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "questions/question_four.py", "diagnostic": "Found 15 fragment(s) in the question_four.py or the output while expecting exactly 0"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in question_four.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 7, "exact": true}, "status": true, "path": "questions/question_four.py"}, {"description": "Ensure that test_question_four.py file exists in the tests/ directory", "check": "ConfirmFileExists", "status": true, "path": "tests/test_question_four.py"}, {"description": "Run checks for Question 1 Part (a) with 'execexam' command and confirm correct exit code", "objectives": "LO1", "command": "poetry run execexam . tests/ --verbose --mark \"question_one_part_a\"", "status": false, "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_one.py                                                                                                 \u2502\n     \u2502 Minimum positive value in matrix: Expected 1, got None                                                               \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_one.py::test_find_minimum_value - assert 1 == None                                        \u2502\n     \u2502 1 failed, 11 deselected in 0.01s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 12 collected, 11 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502   Name: tests/test_question_one.py::test_find_minimum_value                                  \u2502\n     \u2502   Path: <...>/algorithm-analysis-midterm-examination-starter/exam/tests/test_question_one.py \u2502\n     \u2502   Line number: 18                                                                            \u2502\n     \u2502   Message: assert 1 == None                                                                  \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                \u2502\n     \u2502 # File: tests/test_question_one.py Line: 26                                    \u2502\n     \u2502 @pytest.mark.question_one_part_a                                               \u2502\n     \u2502 def test_find_minimum_value():                                                 \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                                \u2502\n     \u2502     demarcate()                                                                \u2502\n     \u2502     # check 1: Matrix with positive values                                     \u2502\n     \u2502     matrix = [[5, 7, 3], [1, 9, 2], [6, 4, 8]]                                 \u2502\n     \u2502     minimum_positive = find_minimum_value(matrix)                              \u2502\n     \u2502     assert_and_print(1, minimum_positive, \"Minimum positive value in matrix\")  \u2502\n     \u2502     # check 2: Matrix with negative values                                     \u2502\n     \u2502     matrix = [[-2, 5, 1], [-3, 0, 6], [-1, -4, 7]]                             \u2502\n     \u2502     minimum_negative = find_minimum_value(matrix)                              \u2502\n     \u2502     assert_and_print(-4, minimum_negative, \"Minimum negative value in matrix\") \u2502\n     \u2502     # check 3: Matrix with a single element                                    \u2502\n     \u2502     matrix = [[10]]                                                            \u2502\n     \u2502     minimum_single = find_minimum_value(matrix)                                \u2502\n     \u2502     assert_and_print(10, minimum_single, \"Minimum value in single matrix\")     \u2502\n     \u2502     # check 4: Empty matrix                                                    \u2502\n     \u2502     matrix = []                                                                \u2502\n     \u2502     minimum_empty = find_minimum_value(matrix)                                 \u2502\n     \u2502     assert_and_print(None, minimum_empty, \"Minimum value in empty matrix\")     \u2502\n     \u2502                                                                                \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"}, {"description": "Run checks for Question 1 Part (b) with 'execexam' command and confirm correct exit code", "objectives": "LO1", "command": "poetry run execexam . tests/ --verbose --mark \"question_one_part_b\"", "status": false, "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Maximum positive value in matrix: Expected 9, got None                                                               \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_one.py::test_find_maximum_value - assert 9 == None                                        \u2502\n     \u2502 1 failed, 11 deselected in 0.01s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 12 collected, 11 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502   Name: tests/test_question_one.py::test_find_maximum_value                                  \u2502\n     \u2502   Path: <...>/algorithm-analysis-midterm-examination-starter/exam/tests/test_question_one.py \u2502\n     \u2502   Line number: 18                                                                            \u2502\n     \u2502   Message: assert 9 == None                                                                  \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                               \u2502\n     \u2502 # File: tests/test_question_one.py Line: 48                                   \u2502\n     \u2502 @pytest.mark.question_one_part_b                                              \u2502\n     \u2502 def test_find_maximum_value():                                                \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                               \u2502\n     \u2502     # check 1: Matrix with positive values                                    \u2502\n     \u2502     matrix = [[5, 7, 3], [1, 9, 2], [6, 4, 8]]                                \u2502\n     \u2502     maximum_positive = find_maximum_value(matrix)                             \u2502\n     \u2502     assert_and_print(9, maximum_positive, \"Maximum positive value in matrix\") \u2502\n     \u2502     # check 2: Matrix with negative values                                    \u2502\n     \u2502     matrix = [[-2, 5, 1], [-3, 0, 6], [-1, -4, 7]]                            \u2502\n     \u2502     maximum_negative = find_maximum_value(matrix)                             \u2502\n     \u2502     assert_and_print(7, maximum_negative, \"Maximum negative value in matrix\") \u2502\n     \u2502     # check 3: Matrix with a single element                                   \u2502\n     \u2502     matrix = [[10]]                                                           \u2502\n     \u2502     maximum_single = find_maximum_value(matrix)                               \u2502\n     \u2502     assert_and_print(10, maximum_single, \"Maximum value in single matrix\")    \u2502\n     \u2502     # check 4: Empty matrix                                                   \u2502\n     \u2502     matrix = []                                                               \u2502\n     \u2502     maximum_empty = find_maximum_value(matrix)                                \u2502\n     \u2502     assert_and_print(None, maximum_empty, \"Maximum value in empty matrix\")    \u2502\n     \u2502                                                                               \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"}, {"description": "Run checks for Question 1 Part (c) with 'execexam' command and confirm correct exit code", "objectives": "LO1", "command": "poetry run execexam . tests/ --verbose --mark \"question_one_part_c\"", "status": false, "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Average value in matrix with positive numbers: Expected 5.0, got None                                                \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_one.py::test_find_average_value - assert 5.0 == None                                      \u2502\n     \u2502 1 failed, 11 deselected in 0.01s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 12 collected, 11 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502   Name: tests/test_question_one.py::test_find_average_value                                  \u2502\n     \u2502   Path: <...>/algorithm-analysis-midterm-examination-starter/exam/tests/test_question_one.py \u2502\n     \u2502   Line number: 18                                                                            \u2502\n     \u2502   Message: assert 5.0 == None                                                                \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                         \u2502\n     \u2502 # File: tests/test_question_one.py Line: 69                                             \u2502\n     \u2502 @pytest.mark.question_one_part_c                                                        \u2502\n     \u2502 def test_find_average_value():                                                          \u2502\n     \u2502     \"\"\"Confirm correctness of a question part.\"\"\"                                       \u2502\n     \u2502     # check 1: Matrix with positive values                                              \u2502\n     \u2502     matrix = [[5, 7, 3], [1, 9, 2], [6, 4, 8]]                                          \u2502\n     \u2502     average_positive = find_average_value(matrix)                                       \u2502\n     \u2502     # assert average_positive == pytest.approx(5.0), \"Average positive value in matrix\" \u2502\n     \u2502     assert_and_print(                                                                   \u2502\n     \u2502         5.0, average_positive, \"Average value in matrix with positive numbers\"          \u2502\n     \u2502     )                                                                                   \u2502\n     \u2502     # check 2: Matrix with negative values                                              \u2502\n     \u2502     matrix = [[-2, 5, 1], [-3, 0, 6], [-1, -4, 7]]                                      \u2502\n     \u2502     average_negative = find_average_value(matrix)                                       \u2502\n     \u2502     assert_and_print(                                                                   \u2502\n     \u2502         1.0, average_negative, \"Average value in matrix with negative numbers\"          \u2502\n     \u2502     )                                                                                   \u2502\n     \u2502     # check 3: Matrix with a single element                                             \u2502\n     \u2502     matrix = [[10]]                                                                     \u2502\n     \u2502     average_single = find_average_value(matrix)                                         \u2502\n     \u2502     assert_and_print(10.0, average_single, \"Average value in single element matrix\")    \u2502\n     \u2502     # check 4: Empty matrix                                                             \u2502\n     \u2502     matrix = []                                                                         \u2502\n     \u2502     average_empty = find_average_value(matrix)                                          \u2502\n     \u2502     assert_and_print(None, average_empty, \"Average value in empty matrix\")              \u2502\n     \u2502                                                                                         \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"}, {"description": "Run checks for Question 2 Part (a) with 'execexam' command and confirm correct exit code", "objectives": "LO1", "command": "poetry run execexam . tests/ --verbose --mark \"question_two_part_a\"", "status": false, "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_two.py                                                                                                 \u2502\n     \u2502 Even number of characters: Expected !olleh, got                                                                      \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_two.py::test_reverse_string - AssertionError: assert '!olleh' == ''                       \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   + !olleh                                                                                                           \u2502\n     \u2502 1 failed, 11 deselected in 0.01s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 12 collected, 11 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502   Name: tests/test_question_two.py::test_reverse_string                                      \u2502\n     \u2502   Path: <...>/algorithm-analysis-midterm-examination-starter/exam/tests/test_question_two.py \u2502\n     \u2502   Line number: 18                                                                            \u2502\n     \u2502   Message: AssertionError: assert '!olleh' == ''                                             \u2502\n     \u2502                                                                                              \u2502\n     \u2502   + !olleh                                                                                   \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                              \u2502\n     \u2502 # File: tests/test_question_two.py Line: 26                                  \u2502\n     \u2502 @pytest.mark.question_two_part_a                                             \u2502\n     \u2502 def test_reverse_string():                                                   \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                              \u2502\n     \u2502     demarcate()                                                              \u2502\n     \u2502     # check 1: short string with even number of characters                   \u2502\n     \u2502     string = \"hello!\"                                                        \u2502\n     \u2502     reversed_string = reverse_str(string)                                    \u2502\n     \u2502     assert_and_print(\"!olleh\", reversed_string, \"Even number of characters\") \u2502\n     \u2502     # check 2: short string with odd number of characters                    \u2502\n     \u2502     string = \"world\"                                                         \u2502\n     \u2502     reversed_string = reverse_str(string)                                    \u2502\n     \u2502     assert_and_print(\"dlrow\", reversed_string, \"Odd number of characters\")   \u2502\n     \u2502     # check 3: short string with non-standard characters                     \u2502\n     \u2502     string = \"$%^&*\"                                                         \u2502\n     \u2502     reversed_string = reverse_str(string)                                    \u2502\n     \u2502     assert_and_print(\"*&^%$\", reversed_string, \"Non-standard characters\")    \u2502\n     \u2502     # check 4: empty string                                                  \u2502\n     \u2502     string = \"\"                                                              \u2502\n     \u2502     reversed_string = reverse_str(string)                                    \u2502\n     \u2502     assert_and_print(\"\", reversed_string, \"Empty string of no characters\")   \u2502\n     \u2502                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"}, {"description": "Run checks for Question 2 Part (b) with 'execexam' command and confirm correct exit code", "objectives": "LO1", "command": "poetry run execexam . tests/ --verbose --mark \"question_two_part_b\"", "status": false, "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_two.py                                                                                                 \u2502\n     \u2502 Even number of numerals: Expected 1234, got 0                                                                        \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_two.py::test_reverse_number - assert 1234 == 0                                            \u2502\n     \u2502 1 failed, 11 deselected in 0.01s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 12 collected, 11 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502   Name: tests/test_question_two.py::test_reverse_number                                      \u2502\n     \u2502   Path: <...>/algorithm-analysis-midterm-examination-starter/exam/tests/test_question_two.py \u2502\n     \u2502   Line number: 18                                                                            \u2502\n     \u2502   Message: assert 1234 == 0                                                                  \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                         \u2502\n     \u2502 # File: tests/test_question_two.py Line: 48                             \u2502\n     \u2502 @pytest.mark.question_two_part_b                                        \u2502\n     \u2502 def test_reverse_number():                                              \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                         \u2502\n     \u2502     demarcate()                                                         \u2502\n     \u2502     # check 1: short number with even number of numerals                \u2502\n     \u2502     number = 4321                                                       \u2502\n     \u2502     reversed_number = reverse_number(number)                            \u2502\n     \u2502     assert_and_print(1234, reversed_number, \"Even number of numerals\")  \u2502\n     \u2502     # check 2: short number with odd number of numerals                 \u2502\n     \u2502     number = 54321                                                      \u2502\n     \u2502     reversed_number = reverse_number(number)                            \u2502\n     \u2502     assert_and_print(12345, reversed_number, \"Odd number of numerals\")  \u2502\n     \u2502     # check 3: short number with non-standard numerals                  \u2502\n     \u2502     number = 12340000                                                   \u2502\n     \u2502     reversed_number = reverse_number(number)                            \u2502\n     \u2502     assert_and_print(4321, reversed_number, \"Non-standard numerals\")    \u2502\n     \u2502     # check 4: empty number                                             \u2502\n     \u2502     number = 0                                                          \u2502\n     \u2502     reversed_number = reverse_number(number)                            \u2502\n     \u2502     assert_and_print(0, reversed_number, \"Empty number of no numerals\") \u2502\n     \u2502                                                                         \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"}, {"description": "Run checks for Question 2 Part (c) with 'execexam' command and confirm correct exit code", "objectives": "LO1", "command": "poetry run execexam . tests/ --verbose --mark \"question_two_part_c\"", "status": false, "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_two.py                                                                                                 \u2502\n     \u2502 Even number of characters: Expected {'hello!': {'count': '6', 'reversed': '!olleh'}}, got {}                         \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_two.py::test_reverse_count - AssertionError: assert {'hello!': {'...d': '!olleh'}} == {}  \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Left contains 1 more item:                                                                                         \u2502\n     \u2502   {'hello!': {'count': '6', 'reversed': '!olleh'}}                                                                   \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502   Full diff:                                                                                                         \u2502\n     \u2502   - {}                                                                                                               \u2502\n     \u2502   + {                                                                                                                \u2502\n     \u2502   +     'hello!': {                                                                                                  \u2502\n     \u2502   +         'count': '6',                                                                                            \u2502\n     \u2502   +         'reversed': '!olleh',                                                                                    \u2502\n     \u2502   +     },                                                                                                           \u2502\n     \u2502   + }                                                                                                                \u2502\n     \u2502 1 failed, 11 deselected in 0.01s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 12 collected, 11 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                              \u2502\n     \u2502   Name: tests/test_question_two.py::test_reverse_count                                       \u2502\n     \u2502   Path: <...>/algorithm-analysis-midterm-examination-starter/exam/tests/test_question_two.py \u2502\n     \u2502   Line number: 18                                                                            \u2502\n     \u2502   Message: AssertionError: assert {'hello!': {'...d': '!olleh'}} == {}                       \u2502\n     \u2502                                                                                              \u2502\n     \u2502   Left contains 1 more item:                                                                 \u2502\n     \u2502   {'hello!': {'count': '6', 'reversed': '!olleh'}}                                           \u2502\n     \u2502                                                                                              \u2502\n     \u2502   Full diff:                                                                                 \u2502\n     \u2502   - {}                                                                                       \u2502\n     \u2502   + {                                                                                        \u2502\n     \u2502   +     'hello!': {                                                                          \u2502\n     \u2502   +         'count': '6',                                                                    \u2502\n     \u2502   +         'reversed': '!olleh',                                                            \u2502\n     \u2502   +     },                                                                                   \u2502\n     \u2502   + }                                                                                        \u2502\n     \u2502                                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                              \u2502\n     \u2502 # File: tests/test_question_two.py Line: 70                                  \u2502\n     \u2502 @pytest.mark.question_two_part_c                                             \u2502\n     \u2502 def test_reverse_count():                                                    \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                              \u2502\n     \u2502     demarcate()                                                              \u2502\n     \u2502     # check 1: short string with even number of characters                   \u2502\n     \u2502     string = \"hello!\"                                                        \u2502\n     \u2502     reversed_string = reverse_count(string)                                  \u2502\n     \u2502     expected = {\"hello!\": {\"count\": \"6\", \"reversed\": \"!olleh\"}}              \u2502\n     \u2502     assert_and_print(expected, reversed_string, \"Even number of characters\") \u2502\n     \u2502     # check 2: short string with odd number of characters                    \u2502\n     \u2502     string = \"world\"                                                         \u2502\n     \u2502     reversed_string = reverse_count(string)                                  \u2502\n     \u2502     expected = {\"world\": {\"count\": \"5\", \"reversed\": \"dlrow\"}}                \u2502\n     \u2502     assert_and_print(expected, reversed_string, \"Odd number of characters\")  \u2502\n     \u2502     # check 3: string with non-standard characters                           \u2502\n     \u2502     string = \"h3ll0!\"                                                        \u2502\n     \u2502     reversed_string = reverse_count(string)                                  \u2502\n     \u2502     expected = {\"h3ll0!\": {\"count\": \"6\", \"reversed\": \"!0ll3h\"}}              \u2502\n     \u2502     assert_and_print(expected, reversed_string, \"Non-standard characters\")   \u2502\n     \u2502     # check 4: empty string                                                  \u2502\n     \u2502     string = \"\"                                                              \u2502\n     \u2502     reversed_string = reverse_count(string)                                  \u2502\n     \u2502     expected = {\"\": {\"count\": \"0\", \"reversed\": \"\"}}                          \u2502\n     \u2502     assert_and_print(expected, reversed_string, \"Empty string\")              \u2502\n     \u2502                                                                              \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"}, {"description": "Run checks for Question 3 Part (a) with 'execexam' command and confirm correct exit code", "objectives": "LO4", "command": "poetry run execexam . tests/ --verbose --mark \"question_three_part_a\"", "status": false, "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_three.py                                                                                               \u2502\n     \u2502 Sum up to the stop value of 10: Expected 55, got 45                                                                  \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_three.py::test_sum_stop_int - assert 55 == 45                                             \u2502\n     \u2502 1 failed, 11 deselected in 0.01s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 12 collected, 11 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                \u2502\n     \u2502   Name: tests/test_question_three.py::test_sum_stop_int                                        \u2502\n     \u2502   Path: <...>/algorithm-analysis-midterm-examination-starter/exam/tests/test_question_three.py \u2502\n     \u2502   Line number: 18                                                                              \u2502\n     \u2502   Message: assert 55 == 45                                                                     \u2502\n     \u2502                                                                                                \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                         \u2502\n     \u2502 # File: tests/test_question_three.py Line: 26                           \u2502\n     \u2502 @pytest.mark.question_three_part_a                                      \u2502\n     \u2502 def test_sum_stop_int():                                                \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                         \u2502\n     \u2502     demarcate()                                                         \u2502\n     \u2502     # check 1: small summation                                          \u2502\n     \u2502     stop = 10                                                           \u2502\n     \u2502     sum = sum_stop_int(stop)                                            \u2502\n     \u2502     expected = 55                                                       \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of 10\")   \u2502\n     \u2502     # check 2: larger summation                                         \u2502\n     \u2502     stop = 100                                                          \u2502\n     \u2502     sum = sum_stop_int(stop)                                            \u2502\n     \u2502     expected = 5050                                                     \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of 100\")  \u2502\n     \u2502     # check 3: summation with stop value of 0                           \u2502\n     \u2502     stop = 0                                                            \u2502\n     \u2502     sum = sum_stop_int(stop)                                            \u2502\n     \u2502     expected = 0                                                        \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of 0\")    \u2502\n     \u2502     # check 4: summation with negative stop value                       \u2502\n     \u2502     stop = -10                                                          \u2502\n     \u2502     sum = sum_stop_int(stop)                                            \u2502\n     \u2502     expected = 0                                                        \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of -10\")\\ \u2502\n     \u2502                                                                         \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"}, {"description": "Run checks for Question 3 Part (b) with 'execexam' command and confirm correct exit code", "objectives": "LO4", "command": "poetry run execexam . tests/ --verbose --mark \"question_three_part_b\"", "status": false, "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_three.py                                                                                               \u2502\n     \u2502 Sum up to the stop value of 10.0 with step size of 1.0: Expected 55.0, got 0.0                                       \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_three.py::test_sum_stop_float - assert 55.0 == 0.0                                        \u2502\n     \u2502 1 failed, 11 deselected in 0.01s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 12 collected, 11 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                \u2502\n     \u2502   Name: tests/test_question_three.py::test_sum_stop_float                                      \u2502\n     \u2502   Path: <...>/algorithm-analysis-midterm-examination-starter/exam/tests/test_question_three.py \u2502\n     \u2502   Line number: 18                                                                              \u2502\n     \u2502   Message: assert 55.0 == 0.0                                                                  \u2502\n     \u2502                                                                                                \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                \u2502\n     \u2502 # File: tests/test_question_three.py Line: 52                                                  \u2502\n     \u2502 @pytest.mark.question_three_part_b                                                             \u2502\n     \u2502 def test_sum_stop_float():                                                                     \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                                                \u2502\n     \u2502     demarcate()                                                                                \u2502\n     \u2502     # check 1: small summation                                                                 \u2502\n     \u2502     stop = 10.0                                                                                \u2502\n     \u2502     step = 1.0                                                                                 \u2502\n     \u2502     sum = sum_stop_float(stop, step)                                                           \u2502\n     \u2502     expected = 55.0                                                                            \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of 10.0 with step size of 1.0\")  \u2502\n     \u2502     # check 2: larger summation                                                                \u2502\n     \u2502     stop = 100.0                                                                               \u2502\n     \u2502     step = 1.0                                                                                 \u2502\n     \u2502     sum = sum_stop_float(stop, step)                                                           \u2502\n     \u2502     expected = 5050.0                                                                          \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of 100.0 with step size of 1.0\") \u2502\n     \u2502     # check 3: summation with stop value of 0                                                  \u2502\n     \u2502     stop = 0.0                                                                                 \u2502\n     \u2502     step = 1.0                                                                                 \u2502\n     \u2502     sum = sum_stop_float(stop, step)                                                           \u2502\n     \u2502     expected = 0.0                                                                             \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of 0.0 with step size of 1.0\")   \u2502\n     \u2502     # check 4: summation with negative stop value                                              \u2502\n     \u2502     stop = -10.0                                                                               \u2502\n     \u2502     step = 1.0                                                                                 \u2502\n     \u2502     sum = sum_stop_float(stop, step)                                                           \u2502\n     \u2502     expected = 0.0                                                                             \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum up to the stop value of -10.0 with step size of 1.0\") \u2502\n     \u2502                                                                                                \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"}, {"description": "Run checks for Question 3 Part (c) with 'execexam' command and confirm correct exit code", "objectives": "LO4", "command": "poetry run execexam . tests/ --verbose --mark \"question_three_part_c\"", "status": false, "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_three.py                                                                                               \u2502\n     \u2502 Sum of function calls in a small dictionary: Expected 10, got 0                                                      \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_three.py::test_sum_function_calls - assert 10 == 0                                        \u2502\n     \u2502 1 failed, 11 deselected in 0.01s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 12 collected, 11 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                \u2502\n     \u2502   Name: tests/test_question_three.py::test_sum_function_calls                                  \u2502\n     \u2502   Path: <...>/algorithm-analysis-midterm-examination-starter/exam/tests/test_question_three.py \u2502\n     \u2502   Line number: 18                                                                              \u2502\n     \u2502   Message: assert 10 == 0                                                                      \u2502\n     \u2502                                                                                                \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                         \u2502\n     \u2502 # File: tests/test_question_three.py Line: 82                                           \u2502\n     \u2502 @pytest.mark.question_three_part_c                                                      \u2502\n     \u2502 def test_sum_function_calls():                                                          \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                                         \u2502\n     \u2502     demarcate()                                                                         \u2502\n     \u2502     # check 1: small dictionary                                                         \u2502\n     \u2502     function_calls = {\"func1\": 5, \"func2\": 5}                                           \u2502\n     \u2502     sum = sum_function_call_counts(function_calls)                                      \u2502\n     \u2502     expected = 10                                                                       \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum of function calls in a small dictionary\")      \u2502\n     \u2502     # check 2: larger dictionary                                                        \u2502\n     \u2502     function_calls = {\"func1\": 50, \"func2\": 50, \"func3\": 100}                           \u2502\n     \u2502     sum = sum_function_call_counts(function_calls)                                      \u2502\n     \u2502     expected = 200                                                                      \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum of function calls in a larger dictionary\")     \u2502\n     \u2502     # check 3: dictionary with a function not called                                    \u2502\n     \u2502     function_calls = {\"func1\": 0, \"func2\": 50, \"func3\": 100}                            \u2502\n     \u2502     sum = sum_function_call_counts(function_calls)                                      \u2502\n     \u2502     expected = 150                                                                      \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum of function calls with a function not called\") \u2502\n     \u2502     # check 4: empty dictionary                                                         \u2502\n     \u2502     function_calls = {}                                                                 \u2502\n     \u2502     sum = sum_function_call_counts(function_calls)                                      \u2502\n     \u2502     expected = 0                                                                        \u2502\n     \u2502     assert_and_print(expected, sum, \"Sum of function calls in an empty dictionary\")     \u2502\n     \u2502                                                                                         \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"}, {"description": "Run checks for Question 4 Part (a) with 'execexam' command and confirm correct exit code", "objectives": "LO4", "command": "poetry run execexam . tests/ --verbose --mark \"question_four_part_a\"", "status": false, "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 test_question_four.py                                                                                                \u2502\n     \u2502 Small list with int duplicates: Expected True, got False                                                             \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_four.py::test_duplicates_int - assert True == False                                       \u2502\n     \u2502 1 failed, 11 deselected in 0.01s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 12 collected, 11 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                               \u2502\n     \u2502   Name: tests/test_question_four.py::test_duplicates_int                                      \u2502\n     \u2502   Path: <...>/algorithm-analysis-midterm-examination-starter/exam/tests/test_question_four.py \u2502\n     \u2502   Line number: 19                                                                             \u2502\n     \u2502   Message: assert True == False                                                               \u2502\n     \u2502                                                                                               \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                             \u2502\n     \u2502 # File: tests/test_question_four.py Line: 27                                \u2502\n     \u2502 @pytest.mark.question_four_part_a                                           \u2502\n     \u2502 def test_duplicates_int():                                                  \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                             \u2502\n     \u2502     demarcate()                                                             \u2502\n     \u2502     # check 1: small list with duplicates                                   \u2502\n     \u2502     data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1]                                   \u2502\n     \u2502     detected = detect_duplicates_int(data)                                  \u2502\n     \u2502     expected = True                                                         \u2502\n     \u2502     assert_and_print(expected, detected, \"Small list with int duplicates\")  \u2502\n     \u2502     # check 2: larger list with duplicates                                  \u2502\n     \u2502     data = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]                    \u2502\n     \u2502     detected = detect_duplicates_int(data)                                  \u2502\n     \u2502     expected = True                                                         \u2502\n     \u2502     assert_and_print(expected, detected, \"Larger list with int duplicates\") \u2502\n     \u2502     # check 3: list without duplicates                                      \u2502\n     \u2502     data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                  \u2502\n     \u2502     detected = detect_duplicates_int(data)                                  \u2502\n     \u2502     expected = False                                                        \u2502\n     \u2502     assert_and_print(expected, detected, \"List without int duplicates\")     \u2502\n     \u2502     # check 4: empty list                                                   \u2502\n     \u2502     data = []                                                               \u2502\n     \u2502     detected = detect_duplicates_int(data)                                  \u2502\n     \u2502     expected = False                                                        \u2502\n     \u2502     assert_and_print(expected, detected, \"Empty list with not int values\")  \u2502\n     \u2502                                                                             \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"}, {"description": "Run checks for Question 4 Part (b) with 'execexam' command and confirm correct exit code", "objectives": "LO4", "command": "poetry run execexam . tests/ --verbose --mark \"question_four_part_b\"", "status": false, "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Small list with str duplicates: Expected True, got True                                                              \u2502\n     \u2502 Larger list with str duplicates: Expected True, got True                                                             \u2502\n     \u2502 List without str duplicates: Expected False, got True                                                                \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_four.py::test_duplicates_str - assert False == True                                       \u2502\n     \u2502 1 failed, 11 deselected in 0.01s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 12 collected, 11 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                               \u2502\n     \u2502   Name: tests/test_question_four.py::test_duplicates_str                                      \u2502\n     \u2502   Path: <...>/algorithm-analysis-midterm-examination-starter/exam/tests/test_question_four.py \u2502\n     \u2502   Line number: 19                                                                             \u2502\n     \u2502   Message: assert False == True                                                               \u2502\n     \u2502                                                                                               \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                \u2502\n     \u2502 # File: tests/test_question_four.py Line: 53                                   \u2502\n     \u2502 @pytest.mark.question_four_part_b                                              \u2502\n     \u2502 def test_duplicates_str():                                                     \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                                \u2502\n     \u2502     # check 1: small list with duplicates                                      \u2502\n     \u2502     data = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"1\"]                  \u2502\n     \u2502     detected = detect_duplicates_str(data)                                     \u2502\n     \u2502     expected = True                                                            \u2502\n     \u2502     assert_and_print(expected, detected, \"Small list with str duplicates\")     \u2502\n     \u2502     # check 2: larger list with duplicates                                     \u2502\n     \u2502     data = [\"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"10\"] \u2502\n     \u2502     detected = detect_duplicates_str(data)                                     \u2502\n     \u2502     expected = True                                                            \u2502\n     \u2502     assert_and_print(expected, detected, \"Larger list with str duplicates\")    \u2502\n     \u2502     # check 3: list without duplicates                                         \u2502\n     \u2502     data = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]                 \u2502\n     \u2502     detected = detect_duplicates_str(data)                                     \u2502\n     \u2502     expected = False                                                           \u2502\n     \u2502     assert_and_print(expected, detected, \"List without str duplicates\")        \u2502\n     \u2502     # check 4: empty list                                                      \u2502\n     \u2502     data = []                                                                  \u2502\n     \u2502     detected = detect_duplicates_str(data)                                     \u2502\n     \u2502     expected = False                                                           \u2502\n     \u2502     assert_and_print(expected, detected, \"Empty list with not str values\")     \u2502\n     \u2502                                                                                \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"}, {"description": "Run checks for Question 4 Part (c) with 'execexam' command and confirm correct exit code", "objectives": "LO4", "command": "poetry run execexam . tests/ --verbose --mark \"question_four_part_c\"", "status": false, "diagnostic": "\u256d\u2500\u2500\u2500\u2500\u2500 \u2728 Parameter Information \u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                    \u2502\n     \u2502 Project directory: .               \u2502\n     \u2502 Test file or test directory: tests \u2502\n     \u2502                                    \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udc0d Test output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                                                      \u2502\n     \u2502 Small list with gene duplicates: Expected True, got False                                                            \u2502\n     \u2502                                                                                                                      \u2502\n     \u2502 =============================================== short test summary info                                              \u2502\n     \u2502 ================================================                                                                     \u2502\n     \u2502 FAILED tests/test_question_four.py::test_duplicates_gene - assert True == False                                      \u2502\n     \u2502 1 failed, 11 deselected in 0.01s                                                                                     \u2502\n     \u2502 Details: 1 failed, 1 total, 12 collected, 11 deselected                                                              \u2502\n     \u2502                                                                                                                      \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\ude22 Failing test details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                               \u2502\n     \u2502   Name: tests/test_question_four.py::test_duplicates_gene                                     \u2502\n     \u2502   Path: <...>/algorithm-analysis-midterm-examination-starter/exam/tests/test_question_four.py \u2502\n     \u2502   Line number: 19                                                                             \u2502\n     \u2502   Message: assert True == False                                                               \u2502\n     \u2502                                                                                               \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n     \n     \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \ud83d\udce6 Failing test code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n     \u2502                                                                                \u2502\n     \u2502 # File: tests/test_question_four.py Line: 78                                   \u2502\n     \u2502 @pytest.mark.question_four_part_c                                              \u2502\n     \u2502 def test_duplicates_gene():                                                    \u2502\n     \u2502     \"\"\"Confirm correctness of question part.\"\"\"                                \u2502\n     \u2502     # check 1: small list with two genes that are duplicates                   \u2502\n     \u2502     data = [                                                                   \u2502\n     \u2502         Gene(\"AADACL3\", 5, \"Arylacetamide deacetylase-like 3\"),                \u2502\n     \u2502         Gene(\"AADACL4\", 5, \"Arylacetamide deacetylase-like 4\"),                \u2502\n     \u2502     ]                                                                          \u2502\n     \u2502     detected = detect_duplicates_gene(data)                                    \u2502\n     \u2502     expected = True                                                            \u2502\n     \u2502     assert_and_print(expected, detected, \"Small list with gene duplicates\")    \u2502\n     \u2502     # check 2: small list with two genes that are not duplicates               \u2502\n     \u2502     data = [                                                                   \u2502\n     \u2502         Gene(\"FPGT02\", 4, \"Fucose-1-phosphate guanylyltransferase\"),           \u2502\n     \u2502         Gene(\"AADACL4\", 5, \"Arylacetamide deacetylase-like 4\"),                \u2502\n     \u2502     ]                                                                          \u2502\n     \u2502     detected = detect_duplicates_gene(data)                                    \u2502\n     \u2502     expected = False                                                           \u2502\n     \u2502     assert_and_print(expected, detected, \"Small list without gene duplicates\") \u2502\n     \u2502     # check 3: larger list with duplicates                                     \u2502\n     \u2502     data = [                                                                   \u2502\n     \u2502         Gene(\"AADACL3\", 5, \"Arylacetamide deacetylase-like 3\"),                \u2502\n     \u2502         Gene(\"FPGT02\", 4, \"Fucose-1-phosphate guanylyltransferase\"),           \u2502\n     \u2502         Gene(\"AADACL4\", 5, \"Arylacetamide deacetylase-like 4\"),                \u2502\n     \u2502         Gene(\"AADACL3\", 5, \"Arylacetamide deacetylase-like 3\"),                \u2502\n     \u2502         Gene(\"AADACL4\", 5, \"Arylacetamide deacetylase-like 4\"),                \u2502\n     \u2502     ]                                                                          \u2502\n     \u2502     detected = detect_duplicates_gene(data)                                    \u2502\n     \u2502     expected = True                                                            \u2502\n     \u2502     assert_and_print(expected, detected, \"Larger list with gene duplicates\")   \u2502\n     \u2502     # check 4: empty list                                                      \u2502\n     \u2502     data = []                                                                  \u2502\n     \u2502     detected = detect_duplicates_gene(data)                                    \u2502\n     \u2502     expected = False                                                           \u2502\n     \u2502     assert_and_print(expected, detected, \"Empty list\")                         \u2502\n     \u2502                                                                                \u2502\n     \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f"}, {"description": "Ensure that Question 1 follows industry-standard rules using the command 'ruff check'", "objectives": "LO1", "command": "poetry run ruff check questions/question_one.py", "status": false, "diagnostic": "questions/question_one.py:79:5: D103 Missing docstring in public function\n     Found 1 error."}, {"description": "Ensure that Question 1 adheres to an industry-standard format using the command 'ruff format'", "objectives": "LO1", "command": "poetry run ruff format questions/question_one.py --check", "status": true}, {"description": "Ensure that Question 1 has correct type annotations using the command 'mypy'", "objectives": "LO1", "command": "poetry run mypy questions/question_one.py", "status": true}, {"description": "Ensure that Question 1 has correct number of fully type annotated functions using the command 'symbex'", "check": "MatchCommandFragment", "objectives": "LO1", "options": {"command": "poetry run symbex -s --fully-typed -f questions/question_one.py --count", "fragment": 3, "count": 1, "exact": true}, "status": false, "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"}, {"description": "Ensure that Question 1 has correct number of documented functions using the command 'symbex'", "check": "MatchCommandFragment", "objectives": "LO1", "options": {"command": "poetry run symbex -s --documented -f questions/question_one.py --count", "fragment": 3, "count": 1, "exact": true}, "status": false, "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"}, {"description": "Ensure that Question 1 has no undocumented functions using the command 'symbex'", "check": "MatchCommandFragment", "objectives": "LO1", "options": {"command": "poetry run symbex -s --undocumented -f questions/question_one.py --count", "fragment": 0, "count": 1, "exact": true}, "status": false, "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"}, {"description": "Ensure that Question 2 follows industry-standard rules using the command 'ruff check'", "objectives": "LO1", "command": "poetry run ruff check questions/question_two.py", "status": false, "diagnostic": "questions/question_two.py:8:20: F401 [*] `typing.Dict` imported but unused\n     questions/question_two.py:75:5: D103 Missing docstring in public function\n     Found 2 errors.\n     [*] 1 fixable with the `--fix` option."}, {"description": "Ensure that Question 2 adheres to an industry-standard format using the command 'ruff format'", "objectives": "LO1", "command": "poetry run ruff format questions/question_two.py --check", "status": true}, {"description": "Ensure that Question 2 has correct type annotations using the command 'mypy'", "objectives": "LO1", "command": "poetry run mypy questions/question_two.py", "status": true}, {"description": "Ensure that Question 2 has correct number of fully type annotated functions using the command 'symbex'", "check": "MatchCommandFragment", "objectives": "LO1", "options": {"command": "poetry run symbex -s --fully-typed -f questions/question_two.py --count", "fragment": 3, "count": 1, "exact": true}, "status": false, "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"}, {"description": "Ensure that Question 2 has correct number of documented functions using the command 'symbex'", "check": "MatchCommandFragment", "objectives": "LO1", "options": {"command": "poetry run symbex -s --documented -f questions/question_two.py --count", "fragment": 3, "count": 1, "exact": true}, "status": false, "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"}, {"description": "Ensure that Question 2 has no undocumented functions using the command 'symbex'", "check": "MatchCommandFragment", "objectives": "LO1", "options": {"command": "poetry run symbex -s --undocumented -f questions/question_two.py --count", "fragment": 0, "count": 1, "exact": true}, "status": false, "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"}, {"description": "Ensure that Question 3 follows industry-standard rules using the command 'ruff check'", "objectives": "LO4", "command": "poetry run ruff check questions/question_three.py", "status": false, "diagnostic": "questions/question_three.py:8:20: F401 [*] `typing.Dict` imported but unused\n     questions/question_three.py:52:5: D403 [*] First word of the first line should be capitalized: `all` -> `All`\n     questions/question_three.py:114:5: D103 Missing docstring in public function\n     Found 3 errors.\n     [*] 2 fixable with the `--fix` option."}, {"description": "Ensure that Question 3 adheres to an industry-standard format using the command 'ruff format'", "objectives": "LO4", "command": "poetry run ruff format questions/question_three.py --check", "status": true}, {"description": "Ensure that Question 3 has correct type annotations using the command 'mypy'", "objectives": "LO4", "command": "poetry run mypy questions/question_three.py", "status": true}, {"description": "Ensure that Question 3 has correct number of fully type annotated functions using the command 'symbex'", "check": "MatchCommandFragment", "objectives": "LO4", "options": {"command": "poetry run symbex -s --fully-typed -f questions/question_three.py --count", "fragment": 3, "count": 1, "exact": true}, "status": false, "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"}, {"description": "Ensure that Question 3 has correct number of documented functions using the command 'symbex'", "check": "MatchCommandFragment", "objectives": "LO4", "options": {"command": "poetry run symbex -s --documented -f questions/question_three.py --count", "fragment": 3, "count": 1, "exact": true}, "status": false, "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"}, {"description": "Ensure that Question 3 has no undocumented functions using the command 'symbex'", "check": "MatchCommandFragment", "objectives": "LO4", "options": {"command": "poetry run symbex -s --undocumented -f questions/question_three.py --count", "fragment": 0, "count": 1, "exact": true}, "status": false, "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"}, {"description": "Ensure that Question 4 follows industry-standard rules using the command 'ruff check'", "objectives": "LO4", "command": "poetry run ruff check questions/question_four.py", "status": true}, {"description": "Ensure that Question 4 adheres to an industry-standard format using the command 'ruff format'", "objectives": "LO4", "command": "poetry run ruff format questions/question_four.py --check", "status": false, "diagnostic": "Would reformat: questions/question_four.py\n     1 file would be reformatted"}, {"description": "Ensure that Question 4 has correct type annotations using the command 'mypy'", "objectives": "LO4", "command": "poetry run mypy questions/question_four.py", "status": true}, {"description": "Ensure that Question 4 has correct number of fully type annotated functions using the command 'symbex'", "check": "MatchCommandFragment", "objectives": "LO4", "options": {"command": "poetry run symbex -s --fully-typed -f questions/question_four.py --count", "fragment": 4, "count": 1, "exact": true}, "status": false, "diagnostic": "Found 0 fragment(s) in the file or the output while expecting exactly 1"}, {"description": "Ensure that Question 4 has correct number of documented functions using the command 'symbex'", "check": "MatchCommandFragment", "objectives": "LO4", "options": {"command": "poetry run symbex -s --documented -f questions/question_four.py --count", "fragment": 5, "count": 1, "exact": true}, "status": true}, {"description": "Ensure that Question 4 has no undocumented functions using the command 'symbex'", "check": "MatchCommandFragment", "objectives": "LO4", "options": {"command": "poetry run symbex -s --undocumented -f questions/question_four.py --count", "fragment": 0, "count": 1, "exact": true}, "status": true}]}